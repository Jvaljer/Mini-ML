# 2 "mmllexer.mll"
 
  open Lexing
  open Mmlparser

  exception Lexing_error of string

  let keyword_or_ident =
    let h = Hashtbl.create 17 in
    (*list of al lthe words which will generate a special tokens*)
    List.iter (fun (s, k) -> Hashtbl.add h s k)
      [ (*conditions*)
        "if", IF;
        "then", THEN; 
        "else", ELSE;
        (*functions*)
        "fun", FUN;
        "let", LET;
        "rec", REC;
        "in", IN;
        (*all types*)
        "int", TINT;
        "bool", TBOOL;
        "unit", TUNIT;
        "mutable", MUTABLE;
        "type", TYPE; (*might be used in type definition for example*)
        (*specials arith operand*)
        "mod", MOD;
        "not", NOT;
        (*boolean values*)
        "true", BOOL(true);
        "false", BOOL(false);
      ] ;
    fun s ->
      try  Hashtbl.find h s
      with Not_found -> IDENT(s)
        

# 40 "mmllexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\226\255\227\255\228\255\229\255\230\255\236\255\237\255\
    \238\255\002\000\001\000\017\000\002\000\003\000\246\255\003\000\
    \248\255\249\255\079\000\160\000\018\000\035\000\002\000\255\255\
    \232\255\253\255\235\255\245\255\244\255\234\255\242\255\241\255\
    \240\255\039\000\252\255\253\255\002\000\039\000\255\255\254\255\
    ";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\028\000\028\000\012\000\022\000\028\000\255\255\008\000\
    \255\255\255\255\004\000\004\000\003\000\024\000\001\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\002\000\002\000\255\255\255\255\
    ";
  Lexing.lex_default =
   "\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\035\000\000\000\000\000\255\255\255\255\000\000\000\000\
    ";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\022\000\023\000\022\000\000\000\022\000\000\000\022\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \022\000\013\000\022\000\000\000\000\000\000\000\010\000\031\000\
    \021\000\005\000\016\000\017\000\039\000\015\000\008\000\014\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\007\000\006\000\011\000\012\000\029\000\028\000\
    \027\000\026\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\024\000\025\000\030\000\036\000\
    \038\000\037\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\
    \000\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\004\000\009\000\003\000\032\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\000\000\000\000\000\000\000\000\018\000\000\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\000\000\000\000\000\000\000\000\018\000\
    \001\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\034\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\022\000\255\255\000\000\255\255\022\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\022\000\255\255\255\255\255\255\000\000\010\000\
    \000\000\000\000\000\000\000\000\036\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\011\000\012\000\
    \013\000\015\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\021\000\021\000\011\000\033\000\
    \037\000\033\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\009\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\255\255\255\255\255\255\255\255\018\000\255\255\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\255\255\255\255\255\255\255\255\019\000\
    \000\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\033\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 48 "mmllexer.mll"
                     ( new_line lexbuf; token lexbuf )
# 192 "mmllexer.ml"

  | 1 ->
# 49 "mmllexer.mll"
                     ( token lexbuf )
# 197 "mmllexer.ml"

  | 2 ->
# 50 "mmllexer.mll"
                     ( comment lexbuf; token lexbuf )
# 202 "mmllexer.ml"

  | 3 ->
let
# 52 "mmllexer.mll"
              n
# 208 "mmllexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 52 "mmllexer.mll"
                     ( CST(int_of_string n) )
# 212 "mmllexer.ml"

  | 4 ->
let
# 53 "mmllexer.mll"
             id
# 218 "mmllexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 53 "mmllexer.mll"
                     ( IDENT(id) )
# 222 "mmllexer.ml"

  | 5 ->
let
# 54 "mmllexer.mll"
               key
# 228 "mmllexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 54 "mmllexer.mll"
                     ( keyword_or_ident key )
# 232 "mmllexer.ml"

  | 6 ->
# 58 "mmllexer.mll"
        ( PLUS )
# 237 "mmllexer.ml"

  | 7 ->
# 59 "mmllexer.mll"
        ( MUL )
# 242 "mmllexer.ml"

  | 8 ->
# 60 "mmllexer.mll"
        ( MINUS )
# 247 "mmllexer.ml"

  | 9 ->
# 61 "mmllexer.mll"
        ( DIV )
# 252 "mmllexer.ml"

  | 10 ->
# 63 "mmllexer.mll"
         ( NEQ )
# 257 "mmllexer.ml"

  | 11 ->
# 64 "mmllexer.mll"
         ( EQ )
# 262 "mmllexer.ml"

  | 12 ->
# 65 "mmllexer.mll"
         ( LT )
# 267 "mmllexer.ml"

  | 13 ->
# 66 "mmllexer.mll"
         ( LE )
# 272 "mmllexer.ml"

  | 14 ->
# 67 "mmllexer.mll"
         ( AND )
# 277 "mmllexer.ml"

  | 15 ->
# 68 "mmllexer.mll"
         ( OR )
# 282 "mmllexer.ml"

  | 16 ->
# 70 "mmllexer.mll"
         ( NEG )
# 287 "mmllexer.ml"

  | 17 ->
# 72 "mmllexer.mll"
         ( DOT )
# 292 "mmllexer.ml"

  | 18 ->
# 73 "mmllexer.mll"
         ( COLON )
# 297 "mmllexer.ml"

  | 19 ->
# 74 "mmllexer.mll"
         ( SEMI )
# 302 "mmllexer.ml"

  | 20 ->
# 75 "mmllexer.mll"
         ( LARROW )
# 307 "mmllexer.ml"

  | 21 ->
# 76 "mmllexer.mll"
         ( RARROW )
# 312 "mmllexer.ml"

  | 22 ->
# 77 "mmllexer.mll"
         ( ASS )
# 317 "mmllexer.ml"

  | 23 ->
# 78 "mmllexer.mll"
         ( PARS )
# 322 "mmllexer.ml"

  | 24 ->
# 80 "mmllexer.mll"
         ( LPAR )
# 327 "mmllexer.ml"

  | 25 ->
# 81 "mmllexer.mll"
         ( RPAR )
# 332 "mmllexer.ml"

  | 26 ->
# 82 "mmllexer.mll"
         ( LBRACE )
# 337 "mmllexer.ml"

  | 27 ->
# 83 "mmllexer.mll"
         ( RBRACE )
# 342 "mmllexer.ml"

  | 28 ->
# 85 "mmllexer.mll"
         ( raise (Lexing_error ("unknown character : " ^ (lexeme lexbuf))) )
# 347 "mmllexer.ml"

  | 29 ->
# 86 "mmllexer.mll"
         ( EOF )
# 352 "mmllexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 33
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 89 "mmllexer.mll"
         ( () )
# 364 "mmllexer.ml"

  | 1 ->
# 90 "mmllexer.mll"
         ( comment lexbuf; comment lexbuf )
# 369 "mmllexer.ml"

  | 2 ->
# 91 "mmllexer.mll"
         ( comment lexbuf )
# 374 "mmllexer.ml"

  | 3 ->
# 92 "mmllexer.mll"
         ( raise (Lexing_error "unterminated comment") )
# 379 "mmllexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

